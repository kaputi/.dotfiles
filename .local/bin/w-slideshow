#!/bin/sh

## requires: nitrogen, imagemagick, notify-send

#kill previous instance of script
script_name=${BASH_SOURCE[0]}
for pid in $(pidof -x $script_name); do
    if [ $pid != $$ ]; then
        kill -9 $pid
    fi 
done

#time in secconds before changing wallpaper
DELAY=1800
# minimum number of imagess
MINCOUNT=4  # 2 or more
CONFIG=/home/$USER/.config 

## create diretory for thumbnails
mkdir -p $CONFIG/w-slideshow


while true; do
    # get path of current wallpaper
    CURRENT=`grep -Po "(?<=file=).*" "$CONFIG/nitrogen/bg-saved.cfg"`
    #read the wallpaper directories
    FILES=`grep -Po "(?<=dirs=).*" "$CONFIG/nitrogen/nitrogen.cfg" | sed "s/;/\/\* /g"`

    # make sure there are enough wallpapers available, randomizing doesn't make a lot of sense with only a few wallies.
    COUNT=`ls $FILES | grep -Eic ".*\.(png|jpe?g|bmp)"`
    if [ $COUNT -ge $MINCOUNT ]; then
        # pick a random wallpaper from these directories and make sure it's different from the current wallpaper
        NEW=`ls $FILES | grep -Ei ".*\.(png|jpe?g|bmp)" | shuf -n 1`
        while [ "$NEW" = "$CURRENT" ]; do
            NEW=`ls $FILES | grep -Ei ".*\.(png|jpe?g|bmp)" | shuf -n 1`
        done

        # create thumbnail
        convert "$NEW" -thumbnail 50x50^ -gravity Center -crop 50x50-0-0 "$CONFIG/w-slideshow/thumb.png"
        # extract filename from path
        NAME=`echo $NEW | grep -Pio "[^/]*(?=\.(png|jpe?g|bmp))" | cut -c1-100`
        # set the wallpaper with nitrogen and notify user
        #nitrogen --set-zoom-fill $NEW && { notify-send -t 5000 -i "$CONFIG/w-slideshow/thumb.png" "Wallpaper Slideshow" "Changed wallaper to \"$NAME\""; sed -i "s!^file=.*!file=$NEW!" $CONFIG/nitrogen/bg-saved.cfg; }
        nitrogen --set-zoom-fill $NEW
        
        # remove thumbnail
        rm -f "$CONFIG/w-slideshow/thumb.png"
    else
        # notify user that there are not enough wallpapers available
        notify-send -t 1000 -i error  "Wallpaper Slideshow" "Not enough wallpapers for random changing"
    fi

    #wait
    sleep $DELAY
done
